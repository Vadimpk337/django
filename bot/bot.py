import requests

from .models import User, Phone, Message, Information, Phone_operator, Comment
from freexel import settings

import requests
from bs4 import BeautifulSoup

import time


def wrap(data):
    try:
        chat_id = data['message']['chat']['id']
        telegram_id = data['message']['from']['id']
        first_name = data['message']['from']['first_name']
        date = data['message']['date']
        text = data['message']['text']

        save_message(telegram_id, chat_id, text, date)
        user, status = check_user_by_register(telegram_id, first_name)

        if text[0] == '?':
            send_message(chat_id, save_comment(telegram_id, text, date))

        elif text == '/res':
            send_message(chat_id, message_res()) 

        elif status == 'B':
            send_message(chat_id, message_B())

        elif text == '/start':
            if user is True:
                send_message(chat_id, 'üëã  –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! \n\n –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.')
            else:
                send_message(chat_id, 'üéâ –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! \n\n –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.')

        elif text == '/help':
            if status == 'U':
                send_message(chat_id, message_help_U())  
            if status == 'A':
                send_message(chat_id, message_help_A())


        elif text == '/comments':
            if status == 'A':
                perm_get_comments(chat_id)
            else: send_message(chat_id, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!')

        elif text[:5] == '/send':
            if status == 'A':
                perm_send_message(text)
            else: send_message(chat_id, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!')

        elif text == '/update':
            if status == 'A':
                perm_parse_7sot()
                send_message(chat_id, '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å!') 
            else: send_message(chat_id, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!')

        elif text == '/last':
            if status == 'A':
                perm_last_messages(chat_id, 10) 
            else: send_message(chat_id, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!')

            

        elif normalize_phone(text) is not None and status != 'B':

            request = find_phone(normalize_phone(text))
            if request is not None:
                compose_message(chat_id, request)
                if request.IIN != '':
                    send_message(chat_id, get_info_by_iin(request.IIN))

            else: send_message(chat_id, '–¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ!')
        elif len(text)== 12 and text[0] != '+' and status != 'B':
            request = find_information_by_IIN(text)
            if request is not None:
                compose_message(chat_id, request)
            send_message(chat_id, get_info_by_iin(text))

        else: send_message(chat_id, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!')

    except KeyError: pass


def send_message(chat_id, text):
    send_result = requests.get(
        f'https://api.telegram.org/bot{settings.TELEGRAM_TOKEN}/sendMessage',
        params={'chat_id': chat_id, 'text': text})


def check_user_by_register(telegram_id, first_name):
    user = User.objects.get_or_create(pk = telegram_id, first_name=first_name)
    return (user[1], user[0].status)

def save_message(telegram_id, chat_id, text, date):
    Message.objects.create(telegram_id=telegram_id, chat_id=chat_id, text=text, date=date)

def find_phone(phone):
    response = Information.objects.filter(phone__number=phone).first()
    if response is not None:
        return response
    else: return None

def find_information_by_IIN(text):
    response = Information.objects.filter(IIN=text).first()
    if response is not None:
        return response
    else: return None


def normalize_phone(phone):
    try:
        if phone is None:
            return None
        elif len(phone) == 12 and phone[0] == '+':
            if ' ' in phone:
                return normalize_phone(phone.replace(' ', ''))
            return phone
        elif len(phone) == 11:
            if phone[0] == '8':
                phone = '+7'+phone[1:]
                return phone
            elif phone[0] == '+':
                phone = '+7'+phone[1:]
                return phone
            else: 
                phone = '+'+phone
                return phone
        elif len(phone) == 10:
            phone = '+7'+phone
            return phone
        elif len(phone) == 9:
            phone = '+77'+phone
            return phone
        elif '¬†' in phone:
            return normalize_phone(phone.replace('¬†', ''))
        elif ' ' in phone:
            return normalize_phone(phone.replace(' ', ''))
        elif '-' in phone:
            return normalize_phone(phone.replace('-', ''))
        elif '‚Äì' in phone:
            return normalize_phone(phone.replace('‚Äì', ''))
        elif '(' or ')' in phone:
            return normalize_phone(phone.replace('(', '').replace(')', ''))
        else:
            print(f'{phone} - is not deformed!')    
            return None
    except RecursionError:
        return None

def compose_message(chat_id, data):

    text = f'üïµÔ∏è  –ù–∞–π–¥–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: \n\n'

    number = data.phone.number
    if number != '':
        text = text +'‚òéÔ∏è   –ù–æ–º–µ—Ä: '+number+'\n\n'

    operator = data.phone.operator.title
    if operator != '':
        text = text +'üåê  –û–ø–µ—Ä–∞—Ç–æ—Ä: '+operator+'\n\n'

    country = data.phone.operator.country
    if operator != '':
        text = text +'üó∫  –°—Ç–∞–Ω–∞: '+country+'\n\n'

    IIN = data.IIN
    if IIN != '':
        text = text +'üá∞üáø  –ò–ò–ù: '+IIN+'\n\n'
        
    bio = data.bio
    if bio != '':
        text = text +'üëΩ  –ü—Ä–æ—á–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: '+bio+'\n\n'

    first_name = data.first_name
    if first_name != '':
        text = text +'üôä  –ò–º—è: '+first_name+'\n\n'

    famaly_name = data.famaly_name
    if famaly_name != '':
        text = text +'üë®‚Äçüë©‚Äçüëß‚Äçüë¶  –§–∞–º–∏–ª–∏—è: '+famaly_name+'\n\n'

    last_name = data.last_name
    if last_name != '':
        text = text +'üë®‚Äçüëß‚Äçüë¶  –û—Ç—á–µ—Å—Ç–≤–æ: '+last_name+'\n\n'

    email = data.email
    if email != '':
        text = text +'üì©  –ü–æ—á—Ç–∞: '+email+'\n\n'
        
    birthday = data.birthday
    if birthday != '':
        text = text +'üéÇ  –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è: '+birthday+'\n\n'

    city = data.city
    if city != '':
        text = text +'üèò  –ì–æ—Ä–æ–¥: '+city+'\n\n'

    
    send_message(chat_id, text)


def message_B():
    text = ' –í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º\
        \n\n —É –í–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞!\
        \n\n –í—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É—è —Ñ–æ—Ä–º–∞—Ç (?—Ç–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è)'


    return text
def message_help_U():
    text = ' –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ª–∏–±–æ –ò–ò–ù –¥–ª—è –ø–æ–∏—Å–∫–∞.\
        \n\n –§–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –ª—é–±—ã–º. –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–∏—Ä–µ, –ø—Ä–æ–±–µ–ª—ã, —Å–∫–æ–±–∫–∏\
        \n\n –§–æ—Ä–º–∞—Ç –ò–ò–ù–∞ - 12 —Ü–∏—Ñ—Ä –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Ç–∏—Ä–µ'

    return text

def message_help_A():
    text = ' –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±–æ—Ç–∞:\
        \n\n /comments - –Ω–æ–≤—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è\
        \n\n /update - –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–∑—É –º–æ—à–µ–Ω–Ω–∏–∫–æ–≤\
        \n\n /last - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç—É\
        \n\n /send ID —Ç–µ–∫—Å—Ç - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é'
    return text

def message_res():
    text = ' –ß—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å, –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –∏–ª–∏ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è\
    \n\n –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–µ–¥ –≤–∞—à–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∑–Ω–∞–∫ –≤–æ–ø—Ä–æ—Å–∞ ( ?–≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ ) '

    return text


def save_comment(telegram_id, text, date):
    user = User.objects.get(pk=telegram_id)
    comment = Comment.objects.create(user=user, description=text[1:], date=date)
    return f' –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ ‚Ññ{date} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ.'



def get_info_by_iin(iin):
    url = f"https://pk.uchet.kz/p/iin/{iin}/full/"
    page = requests.get(url)
    soup = BeautifulSoup(page.text, "html.parser")
    info = []
    if 'info-value col' in page.text:
        
        for block in soup.find_all('div', class_='info-value col'):
            if block.text.replace('\n', '') != '–ù–µ—Ç':
                info.append(block.text.replace('\n', ''))
            else:
                continue

        text = 'üïµÔ∏è  –ù–∞–π–¥–µ–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –ò–ò–ù—É:'
        for t in info:
            if len(t) == 12:
                continue
            if len(t) == 10 and len(t.split('.')) == 3:
                continue
            if '–ª–µ—Ç' in t:
                t = f'–í–æ–∑–≤—Ä–∞—Å—Ç: {t}'
            if len(t.split(' ')) == 3:
                t = t.title()
            text += "\n\n  "+t
        return text

    else : return 'üòî –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –ò–ò–ù—É –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.'


def perm_send_message(text):
    try:
        chat = text.split(' ')[1]
        text = text[text.index(chat)+len(chat):]
        send_message(chat, text)
    except IndexError: send_message(chat_id, '–ò—Å–ø–æ–ª—å–∑—É–π /send ID —Ç–µ–∫—Å—Ç')


def perm_get_comments(chat_id):
    qs = Comment.objects.filter(completed=False)
    for query in qs:
        text = f'–û–±—Ä–∞—â–µ–Ω–∏–µ ‚Ññ{query.date}: {query.description}  \n~{query.user.first_name}'
        send_message(chat_id, text)


def perm_last_messages(chat_id, count):
    queryset = Message.objects.order_by('-date')[:count]
    messages = reversed(list(queryset))
    msg = 1
    for message in messages:
        text = f'{msg}| {message.text}'
        send_message(chat_id, text)
        msg += 1


def perm_parse_7sot():
    page_number = 1
    while True:
        print(f'–ü–æ–∏—Å–∫ –Ω–æ–º–µ—Ä–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page_number}')

        page = requests.get(f'https://7sot.info/complaints?page={page_number}')
        soup = BeautifulSoup(page.text, "html.parser")
        counter = 0
        for block in soup.find_all('div', class_='p-5 bg-gray-500 text-white space-y-3 rounded'):

            gr = block.find('a', class_='mr-2 mb-2 md:mb-0 text-gray-800 bg-yellow-300 hover:bg-yellow-200 rounded py-1 px-2 inline-block').text.replace('  ', '').replace('\n', '')
            ph = block.find('a', class_='bg-gray-600 rounded px-2 py-1').text.replace(' ', '').replace('\n', '')

            gr = '–ù–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã—Ö –º–æ—à–µ–Ω–Ω–∏–∫–æ–≤: '+gr
            operator = Phone_operator.objects.get_or_create(code=ph[:5])[0]
            phone = Phone.objects.get_or_create(number=ph, operator=operator)
            if phone[1] is True:
                counter += 1
                bio = Information.objects.update_or_create(bio=gr, phone=phone[0])

        page_number += 1  
        if counter < 6:
            break






    







